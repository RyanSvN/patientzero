@using System
@inherits PanelComponent

@if ( !LocalPlayer.IsValid() ) return;

<root>
	<div class="vitals">
		<p>Currency: @LocalPlayer.Currency</p>
		<p>@GetTimeString()</p>
	</div>
	<div class="wave_information">
		<div>
			<p>@EnemyManager.Wave</p>
			<p>Wave</p>
		</div>
		<div>
			<p>@EnemyManager.AmountOfEnemiesToSpawn</p>
			<p>Total Enemies</p>
		</div>
		<div>
			<p>@EnemyManager.TotalEnemies</p>
			<p>Enemies Remaining</p>
		</div>
	</div>

	<div class="healthbars">
		<div class="healthbar">
			<div class="inner">
				<div class="fill" style="width: @( LocalPlayer.Health / LocalPlayer.MaxHealth * 100f )%"></div>
			</div>
		</div>
	</div>
</root>

@code
{


	TopDownGPC LocalPlayer { get; set; }

	EnemyManager EnemyManager { get; set; }

	protected override void OnFixedUpdate()
	{
		if ( !LocalPlayer.IsValid() )
		{
			LocalPlayer = Scene.GetAllComponents<TopDownGPC>().FirstOrDefault( p => p.Network.OwnerConnection == Connection.Local );
		}

		if ( !EnemyManager.IsValid() )
		{
			EnemyManager = Scene.GetAllComponents<EnemyManager>().First();
		}
	}


	string GetTimeString()
	{
		var time = LocalPlayer.TimeAlive;
		var minutes = (int)time / 60;
		var seconds = (int)time % 60;
		return $"{minutes:00}:{seconds:00}";
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( LocalPlayer.Currency, LocalPlayer.Health, @GetTimeString(), EnemyManager.Wave, EnemyManager.TotalEnemies, EnemyManager.AmountOfEnemiesToSpawn );
	}

}
